// Event loop

We know that a browser has many functions and responsiblities
we saw that rendering engine is reponsible for the UI. JS engine is reponsible for the
javascript execution , which sums up that there is a lot going at the backend of a website

Now we need to understand that Js engine executes code in "Single threaded" manner . that is it executes one 
line of  code at a time and execution is synchronous is nature. 
But isha you read that JS is Asynchronous how????


So there are three key points to remember 
1. Event loop
2. execution context
3. Call stack

taking an example


 const longRunninFn = () => {
     console.log("longRunninfn started");
     const duration = Date.now() + 3000
     while(Date.now() <=duration){
        
     }
     console.log("longRunninfn ended");
 }

 const handleClick = () => {
     console.log("button clicked");
 }

 document.addEventListener("DOMContentLoaded" , ()=> {
     document.getElementById("clickable").addEventListener("click" , handleClick)
     longRunninFn()
 })


Yaha pe agar apan dekhe toh click event is handled baad me and phele function ka
execution khtm hua . abh the thing is events / reqs and stuff are placed in event queque
and once the call stack is cleared by taking functions for execution and then 
putting it back. it then takes the events present in the event queque. 


whenever a function is created its execution context is created and placed on the queque

Summing up ki javascript works in synchronous way but due to event queque we feel
that it is asynchronous.


--------------------browser storage------------------------------
In web development, browser storage refers to the mechanisms provided by web browsers to store data 
persistently on the client side. There are two main types of browser storage: 

1. **LocalStorage:**
   - **Functionality:**
     - LocalStorage is a simple key-value pair storage mechanism that allows you to store data as strings.
     - It's synchronous and has a simple API, making it easy to use.
     - Data stored in LocalStorage remains even after the user closes the browser and 
     is available for future sessions.
   - **Use Cases:**
     - Storing small amounts of data (typically strings) that you want to persist 
     between page reloads or sessions.
     - Cache data to improve performance by reducing the need to fetch the same data repeatedly from a server.

   - **Example:**
     ```javascript
     // Storing data in LocalStorage
     localStorage.setItem('key', 'value');

     // Retrieving data from LocalStorage
     const storedValue = localStorage.getItem('key');
     ```

2. **SessionStorage:**
   - **Functionality:**
     - Similar to LocalStorage but scoped to a single session. Data stored in SessionStorage is only available for the duration of the page session.
     - Like LocalStorage, it's synchronous and uses a key-value pair approach.

            sessionStorage.setItem(key, value):
            sessionStorage.getItem(key)
            sessionStorage.removeItem(key)
            sessionStorage.clear()




   - **Use Cases:**
     - Storing temporary data that is only needed for the duration of a page session.
     - Sharing data between pages during the same session.

   - **Example:**
     ```javascript
     // Storing data in SessionStorage
     sessionStorage.setItem('key', 'value');

     // Retrieving data from SessionStorage
     const storedValue = sessionStorage.getItem('key');
     ```

Browser storage is commonly used to enhance the user experience by providing a way to store user 
preferences, cache data, or maintain the state of an application. However, it's important to note
 that browser storage is limited in capacity (usually around 5-10 MB per domain), and sensitive
  data should be handled with caution. Developers often choose between LocalStorage and SessionStorage
   based on the persistence requirements of the data. If data needs to persist across sessions, 
   LocalStorage is used, while SessionStorage is suitable for data needed only during a single session.


----------------creating dark theme // light theme button-------------